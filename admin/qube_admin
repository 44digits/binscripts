#!/bin/bash

# qube_mgmt
#
# automate the creation and updating of qubes
#
# Date: 2021.02.10
# Author: Andrew Ross
#


declare _MASTER_DEBIAN_TEMPLATE=debian-10
declare _MASTER_FEDORA_TEMPLATE=fedora-32
declare _CONFIGDIR="$(dirname $0)/config/"

declare __notifylevel="${__notifylevel:-2}"
declare __qvm_run_options="${__qvm_run_options:-"-p --color-stderr=37"}"

source $(dirname "$0")/qubes_functions
set -e


function print_help() {
    echo "Usage: qube_admin (-c | -u ) -t (template name|all) -a (app vm name|all)"
    echo "  where c:create, u:update"
    exit 1
}


function create_template () {
    declare _template=$1
    declare _master=$2
    declare _software=$3
    notify 1 "--create_template : _template:$_template, _software:$_software"

    if [[ -z $(qube_exists $_template) ]]; then
        notify 2 "--create_template : creating _template:$_template"
        qvm-clone $_master $_template
    else
        notify 2 "--create_template : exists _template:$_template"
        exit 1
    fi

    qube_update $_template
    qube_install_software $_template $_software
}

function build_system_dvm () {
    declare _vm=${VM_TEMPLATE_NAMES[dvm]}
    
    config_firefox $_vm
}



function template_install_additions () {
    declare _vm=$1

    notify 2 "--template_install_additions: $_vm"
    case $_vm in
        dvm)
            build_system_dvm
            ;;
        printer)
            build_printer_dvm
            ;;
        congy)
            build_congy
            ;;
        *)
    esac
}


function config_user () {
    declare _appvm=$1
    declare _commands

    notify 2 "--config_user _appvm:$_appvm"
    qvm-start --skip-if-running $_appvm
    sleep 1

    # nautilus config
    _commands=$(cat <<EOF
        dconf write /org/gnome/nautilus/list-view/default-zoom-level \'small\'
        dconf write /org/gnome/nautilus/list-view/use-tree-view true
        dconf write /org/gnome/nautilus/preferences/default-folder-viewer \'list-view\'
        dconf write /org/gtk/settings/file-chooser/expand-folders true
        dconf write /org/gtk/settings/file-chooser/sort-directories-first true
EOF
)

    qube_run_commands $_appvm "user" "$_commands"

    declare _lines=$(cat dotfiles/__bashrc)
    qube_append_file \
        $_appvm \
        "user" \
        "/home/user/.bashrc" \
        "${_lines//\"/\\\"}"

    qube_copy_file \
        $_appvm \
        "user" \
        "dotfiles/_vimrc" \
        "/home/user/.vimrc"

    qube_copy_file \
        $_appvm \
        "user" \
        "dotfiles/_screenrc" \
        "/home/user/.screenrc"
}


function config_firefox_addons () {
    declare _appvm=$1
    declare _commands

    notify 2 "--config_firefox_addons _appvm:$_appvm"

    _commands=$(cat <<EOF
        firefox 
            https://addons.mozilla.org/en-US/firefox/addon/noscript/ 
            https://addons.mozilla.org/en-US/firefox/addon/adblock-plus/ 
EOF
    )
    _commands=$(echo $_commands | tr '[:space:]' ' ')
    qube_run_commands $_appvm "user" $_commands
}



function config_firefox () {
    declare _vm=$1
    declare _commands
    declare _f

    notify 2 "--config_firefox _appvm:$_vm"

    for _f in ls config/configFirefox/; do
        qvm-copy-to-vm $_template $_f
    done

    qvm-run \
        $__qvm_run_options \
        -u "root" \
        $_vm \
        "/home/user/QubesIncoming/dom0/configFirefox"
}


function create_vpn () {
    declare _vpnvm=sys-vpn-ro
    declare _apptemplate=debian-9-plus
    declare _vpnappdvm=vpn-dvm

    notify 2 "--create_vpn: _vpnvm:$_vpnvm, _systemplate:$_SYSTEMPLATE, _apptemplate:$_apptemplate"

    qvm-create --class AppVM \
        --template $_SYSTEMPLATE \
        --label red \
        --prop=maxmem=500 \
        --prop=memory=500 \
        --prop=netvm=sys-net \
        --prop=vcpus=2 \
        --prop=provides_network=True \
        $_vpnvm
    qube_copy_file $_vpnvm \
        "user" \
        "$_CONFIGDIR/vpn.ovpn" \
        "/tmp/vpn.ovpn"
    qube_copy_file $_vpnvm \
        "user" \
        "$_CONFIGDIR/configure_vpn" \
        "/tmp/configure_vpn"
    qvm-run $__qvm_run_options \
        -u root \
        $_vpnvm \
        "bash /tmp/configure_vpn"
    qvm_wait_shutdown $_vpnvm

    notify 2 "--create_vpn: _vpnappdvm:$_vpnappdvm"

    qvm-create --class AppVM \
        --template $_apptemplate \
        --label red \
        --prop=maxmem=2048 \
        --prop=memory=1024 \
        --prop=netvm=$_vpnvm \
        $_vpnappdvm
    qvm-prefs $_vpnappdvm template_for_dispvms True
    qvm-features $_vpnappdvm appmenus-dispvm 1
    qvm-start $_vpnappdvm

    qube_copy_file $_vpnappdvm \
        "user" \ 
        "$_CONFIGDIR/configure_vpn_client" \
        "/tmp/configure_vpn_client"

    notify 0 "  configuring appvm $_vpnappdvm: install firefox addons, set/fix firefox homepage, set cache"
    qvm-run $__qvm_run_options \
        -u root \
        $_vpnappdvm \
        "bash /tmp/configure_vpn_client"
    qvm-shutdown $_vpnappdvm 
}


function create_appvm () {
    declare _appvm=$1
    declare _configs=(${2//;/ })

    # 0 type;1 template;2 lable;3 maxmem;4 memory;
    # 5 storage;6 vCPUs;7 network;8 dvm"

    notify 2 "--create_appvm _appvm:$_appvm, _template:${_configs[1]}"
    notify 2 "--create_appvm ${_configs[@]}"
    
    qvm-create \
        --class ${_configs[0]} \
        --template ${_configs[1]} \
        --label ${_configs[2]} \
        --prop=maxmem=${_configs[3]} \
        --prop=memory=${_configs[4]} \
        --prop=vcpus=${_configs[6]} \
        $_appvm

    qvm-prefs $_appvm qrexec_timeout 200

    if [[ ${_configs[5]} != "x" ]]; then
        qvm-volume extend $_appvm:private ${_configs[5]}mb
    fi
    
    if [[ ${_configs[7]} == "x" ]]; then
        qvm-prefs $_appvm netvm ""
    else
        qvm-prefs $_appvm netvm ${_configs[7]} 
    fi
    
    if [[ ${_configs[8]} -eq "1" ]]; then
        qvm-prefs $_appvm template_for_dispvms True
    fi
}


function create_media_appvms() {
    declare _template=$1
    declare _appvm

    # create media dvm
    _appvm=media-dvm
    notify 2 "--create_media__appvms _template:$_template, APPVM:$APPVM"

    qvm-create --class AppVM \
        --template $_template \
        --label red \
        --prop=maxmem=8192 \
        --prop=memory=1024 \
        $_appvm
    qvm-prefs $_appvm template_for_dispvms True
    qvm-features $_appvm appmenus-dispvm 1
    qvm-volume extend $_appvm:private 8192mb

    qvm-start $_appvm
    config_user $_appvm
    qvm-shutdown $_appvm 

    # create media
    declare _appvm=media
    check_vm $_appvm

    qvm-create --class AppVM \
        --template $_template \
        --label green \
        --prop=maxmem=8192 \
        --prop=memory=1024 \
        $_appvm
    qvm-volume extend $_appvm:private 8192mb

    qvm-start $_appvm
    config_user $_appvm
    qvm-shutdown $_appvm 
}


function install_printer_soft () {
    local TEMPLATE=$1
    local brotherinst=linux-brprinter-installer-2.2.1-1

    notify 1 "--install_printer_soft TEMPLATE:$TEMPLATE"
    sleep 5 # wait for install to complete

    qvm-shutdown $TEMPLATE
    qvm-prefs $TEMPLATE netvm sys-firewall
    qvm-start $TEMPLATE

    echo "qvm-copy-to-vm $TEMPLATE $_CONFIGDIR/$brotherinst.gz"
    qvm-copy-to-vm $TEMPLATE $_CONFIGDIR/$brotherinst.gz
    echo "--Install printer soft: model number MFCL2710DW"
    qvm-run -p $TEMPLATE "gunzip /home/user/QubesIncoming/dom0/$brotherinst.gz"
    qvm-run -p -u root $TEMPLATE "bash /home/user/QubesIncoming/dom0/$brotherinst"
    qvm-run -p $TEMPLATE "rm -rf /home/user/QubesIncoming"
    qvm-run -p $TEMPLATE "rm -f /home/user/*.deb"
    qvm-run -p $TEMPLATE "rm -f /home/user/uninstaller*"

    qvm-shutdown $TEMPLATE 
    qvm-prefs $TEMPLATE netvm ''
}


function create_printer_appvms() {
    local TEMPLATE=$1

    # create printer dvm
    local appvm=printer-dvm
    check_vm $appvm

    qvm-create --class AppVM --template $TEMPLATE --label red --prop=maxmem=2048 --prop=memory=400 $appvm
    qvm-prefs $appvm template_for_dispvms True
    qvm-features $appvm appmenus-dispvm 1

    qvm-start $appvm
    qvm-copy-to-vm $appvm $_CONFIGDIR/scanBro
    qvm-run -p -u root $appvm "cp /home/user/QubesIncoming/dom0/scanBro /usr/local/bin/"
    qvm-run -p -u root $appvm "chmod +x /usr/local/bin/scanBro"
    qvm-copy-to-vm $appvm $_CONFIGDIR/printBro
    qvm-run -p -u root $appvm "cp /home/user/QubesIncoming/dom0/printBro /usr/local/bin/"
    qvm-run -p -u root $appvm "chmod +x /usr/local/bin/printBro"
    qvm-copy-to-vm $appvm $_CONFIGDIR/combine_doublesided
    qvm-run -p -u root $appvm "cp /home/user/QubesIncoming/dom0/combine_doublesided /usr/local/bin/"
    qvm-run -p -u root $appvm "chmod +x /usr/local/bin/combine_doublesided"
    qvm-copy-to-vm $appvm $_CONFIGDIR/img2pdf
    qvm-run -p -u root $appvm "cp /home/user/QubesIncoming/dom0/img2pdf /usr/local/bin/"
    qvm-run -p -u root $appvm "chmod +x /usr/local/bin/img2pdf"

    qvm-run -p $appvm  "rm -rf /home/user/QubesIncoming"
    qvm-shutdown $appvm
}


function create_plus_appvms() {
    local TEMPLATE=$1

    # create plus-dvm
    local appvm=plus-dvm
    check_vm $appvm

    qvm-create --class AppVM \
        --template $TEMPLATE \
        --label red \
        --prop=maxmem=4096 \
        --prop=memory=1024 \
        $appvm
    qvm-prefs $appvm template_for_dispvms True
    qvm-features $appvm appmenus-dispvm 1
    qvm-volume extend $appvm:private 20480mb

    # create work
    local appvm=work
    check_vm $appvm

    qvm-create --class AppVM \
        --template $TEMPLATE \
        --label green \
        --prop=maxmem=8192 \
        --prop=memory=1024 \
        --prop=netvm="" \
        $appvm
    qvm-volume extend $appvm:private 20480mb
    
    # create epub
    local appvm=epub
    check_vm $appvm

    qvm-create --class AppVM \
        --template $TEMPLATE \
        --label green \
        --prop=maxmem=8192 \
        --prop=memory=1024 \
        --prop=netvm="" \
        $appvm
    qvm-volume extend $appvm:private 50000mb
}


function create_gpg () {
    local _systemplate=fedora-30
    local APPNAME=gpg
    qvm-create --class AppVM \
        --template $_systemplate \
        --label orange \
        --prop=maxmem=4000 \
        --prop=memory=400 \
        --prop=netvm="" \
        $APPNAME
    qvm-start $APPNAME
    qvm-run -p -u root $APPNAME "sudo apt-get install qubes-gpg-split"


}



function create_dev () {
    declare _vm

    TEMPLATE=${VM_TEMPLATE_NAMES[dev]}
    SOFTWARE=${VM_SOFT[dev]}
    create_template $TEMPLATE $_MASTERTEMPLATE $SOFTWARE

    for _vm in \
        dev \
        learn;
    do
        create_appvm $_vm ${VM_CONFIG[$_vm]}
        config_user $_vm
        config_firefox $_vm

        for _f in \
            appendPDF \
            doublePDF \
            img2pdf \
            randomChars.py;
        do
            qube_copy_file \
                $_vm \
                "root" \
                "utilities/$_f" \
                "/usr/local/bin/$_f"
        done
        for _f in \
            python3_install \
            go_install; 
        do
            qube_copy_file \
                $_vm \
                "user" \
                "config/$_f" \
                "/home/user/$_f"
        done

        qube_remove_incomming $_vm
        qvm-shutdown $_vm
    done
}



function create_congy () {
    declare _vm
    declare _template
    declare _software

    notify 2 "--create_congy"
    _template=${VM_TEMPLATE_NAMES[congy]}
    _software=${VM_SOFT[congy]}
    create_template $_template $_MASTERTEMPLATE $_software

    qube_copy_file \
        $_template \
        "root" \
        "config/congy/congy.config.secret" \
        "/etc/openfortivpn/config"
    qvm-run \
        $__qvm_run_options \
        -u root \
        $_template \
        "chmod 600 /etc/openfortivpn/config"

    qube_copy_file \
        $_template \
        "root" \
        "config/congy/openfortivpn.service" \
        "/etc/systemd/system/openfortivpn.service"
    qvm-run \
        $__qvm_run_options \
        -u root \
        $_template \
        "systemctl enable openfortivpn"

    qube_remove_incomming $_vm
    qvm-shutdown $_vm
    
    _vm=congy
    create_appvm $_vm ${VM_CONFIG[$_vm]}
    config_user $_vm
    qvm-run \
        $__qvm_run_options \
        -u user \
        $_vm \
        "mkdir -p /home/user/.local/share/remmina/"
    qube_copy_file \
        $_vm \
        "user" \
        "config/congy/group_rdp_congy.remmina.secret" \
        "/home/user/.local/share/remmina/group_rdp_congy.remmina" 

    qube_remove_incomming $_vm
    qvm-shutdown $_vm
}



function create_min () {
    declare _vm

    # min
    TEMPLATE=${VM_TEMPLATE_NAMES[min]}
    SOFTWARE=${VM_SOFT[min]}
    create_template $TEMPLATE $_MASTERTEMPLATE $SOFTWARE

    for _vm in \
        files \
        fin \
        gpg;
    do
        create_appvm $_vm ${VM_CONFIG[$_vm]}
        config_user $_vm
    done

    # files setup
    for _f in \
        appendPDF \
        doublePDF \
        img2pdf \
        randomChars.py; 
    do
        qube_copy_file \
            files \
            "root" \
            "utilities/$_f" \
            "/usr/local/bin/$_f"
    done

    # fin setup
    for _f in \
        appendPDF \
        img2pdf \
        mntv \
        randomChars.py \
        updateVault \
        updateVault.secrets; 
    do
        qube_copy_file \
            fin \
            "root" \
            "utilities/$_f" \
            "/usr/local/bin/$_f"
    done

    # gpg setup
    qvm-run \
        $__qvm_run_options \
        -u root \
        gpg \
        "sudo apt-get install qubes-gpg-split"

    for _vm in \
        files \
        fin \
        gpg; \
    do
        qube_remove_incomming $_vm
        qvm-shutdown $_vm
    done
}



function main () {
    declare ACTION
    declare VM

    while getopts ":cut:a:" opt; do
        case $opt in
            c)
                ACTION="create"
                ;;
            u)
                ACTION="update"
                ;;
            t)
                VMTYPE="template"
                VM=$OPTARG
                ;;
            a)
                VMTYPE="app"
                VM=$OPTARG
                ;;
            :)
                echo "Option -$OPTARG requires argument"
                print_help
                ;;
            \?)
                echo "Invalid option: -$OPTARG"
                print_help
                ;;
        esac
    done


    if [ "$ACTION" == "" ] || [ "$VM" == "" ]; then
        print_help
    fi

    if [ "$DEBUG" ]; then echo "--VM:$VM ACTION:$ACTION"; fi

    case $ACTION in 
        create)
            case $VMTYPE in
                template)
                    TEMPLATE=${VM_TEMPLATE_NAMES[$VM]}
                    SOFTWARE=${VM_SOFT[$VM]}

                    create_template $TEMPLATE $SOFTWARE
                    template_install_additions $VM
                    ;;
                app)
                    create_app_vm $TEMPLATE
                    ;;
            esac
            ;;
        update)
            case $VMTYPE in
                template)
                    TEMPLATE=${VM_TEMPLATE_NAMES[$VM]}
                    qube_update $TEMPLATE
                    ;;
                app)
                    echo "Only Template VMs can be updated"
                    print_help
                    ;;
            esac
            ;;
        *) 
            echo "Unknown action: $ACTION"
            print_help
            ;;
    esac


}



declare -A VM_SOFT
declare -A VM_TEMPLATE_NAMES
declare -A VM_CONFIG

VM_TEMPLATE_NAMES=(
    [debian]=$_MASTER_DEBIAN_TEMPLATE
    [fedora]=$_MASTER_FEDORA_TEMPLATE
    [congy]=$_MASTER_DEBIAN_TEMPLATE-congy
    [dev]=$_MASTER_DEBIAN_TEMPLATE-dev
    [dvm]=$_MASTER_FEDORA_TEMPLATE-dvm
    [media]=$_MASTER_DEBIAN_TEMPLATE-media
    [min]=$_MASTER_DEBIAN_TEMPLATE-min
    [plus]=$_MASTER_DEBIAN_TEMPLATE-plus
    [printer]=$_MASTER_DEBIAN_TEMPLATE-printer
    [usb]=$_MASTER_FEDORA_TEMPLATE-usb
    [zoom]=$_MASTER_DEBIAN_TEMPLATE-zoom
    )

VM_CONFIG=( # "type;template;lable;maxmem;memory;name;storage;vCPUs;network;dvm"
    [fin]="AppVM;${VM_TEMPLATE_NAMES[min]};purple;1024;400;9216;1;x;0"
    [gpg]="AppVM;${VM_TEMPLATE_NAMES[min]};purple;800;400;x;1;x;0"
    [files]="AppVM;${VM_TEMPLATE_NAMES[min]};blue;800;400;152576;1;x;0"
    [work]="AppVM;${VM_TEMPLATE_NAMES[plus]};green;4000;400;20480;1;sys-firewall;0"
    [media]="AppVM;${VM_TEMPLATE_NAMES[media]};green;8192;1024;30720;2;sys-firewall;0"
    [epub]="AppVM;${VM_TEMPLATE_NAMES[plus]};green;2000;500;50176;1;sys-firewall;0"
    [dev]="AppVM;${VM_TEMPLATE_NAMES[dev]};yellow;4000;400;10000;2;sys-firewall;0"
    [learn]="AppVM;${VM_TEMPLATE_NAMES[dev]};yellow;4000;400;10000;2;sys-firewall;0"
    [congy]="AppVM;${VM_TEMPLATE_NAMES[congy]};orange;4000;400;x;2;sys-firewall;0"
    [zoom]="AppVM;${VM_TEMPLATE_NAMES[zoom]};orange;4000;400;x;3;sys-firewall;1"
    [usb]="AppVM;${VM_TEMPLATE_NAMES[usb]};orange;4000;2000;22528;3;sys-firewall;0"
    [sys-vpn-ro]="AppVM;${VM_TEMPLATE_NAMES[system]};orange;500;400;x;1;sys-net;0"
    [plus-dvm]="AppVM;${VM_TEMPLATE_NAMES[plus]};red;4096;400;5120;2;sys-firewall;1"
    [printer-dvm]="AppVM;${VM_TEMPLATE_NAMES[printer]};red;974;350;x;1;sys-firewall;1"
    [media-dvm]="AppVM;${VM_TEMPLATE_NAMES[media]};red;8192;820;dvm;8192;2;sys-firewall;1"
    [vpn-dvm]="AppVM;${VM_TEMPLATE_NAMES[plus]};red;4000;400;9216;2;sys-vpn-ro;1"
    [vpn-dvm-big]="AppVM;${VM_TEMPLATE_NAMES[plus]};red;4000;400;28672;2;sys-vpn-ro;1"
    [fedora-dvm]="AppVM;${VM_TEMPLATE_NAMES[system]};red;2000;600;x;2;sys-firewall;1"
    )

VM_SOFT=( 
    [plus]=$(tr -s [:space:] '&' <<EOF
        audacity
        calibre
        chromium
        curl
        deluge
        eog
        gimp
        git
        gnucash
        inkscape
        jmtpfs
        lame
        libdbd-sqlite3
        librecad
        libreoffice
        lyx 
        nautilus
        pdftk
        python3-pip
        remmina
        remmina
        rsync
        s3cmd
        screen
        texlive 
        texlive-fonts-extra 
        texlive-fonts-recommended 
        texlive-latex-base 
        texlive-latex-extra 
        texlive-latex-recommended 
        texmaker
        texworks 
        tmux
        vlc
        xournal
        xsane
EOF
    )
    [media]=$(tr -s [:space:] '&' <<EOF
        chromium
        eog
        rsync
        kodi
        libavcodec-extra
        nautilus
        vlc
EOF
    )
    [min]=$(tr -s [:space:] '&' <<EOF
        eog
        evince
        rsync
        gnucash
        gocryptfs
        libdbd-sqlite3
        nautilus
        pdftk
        scrypt
EOF
    )
    [dev]=$(tr -s [:space:] '&' <<EOF
        build-essential
        chromium
        git
        curl
        rsync
        gnucash
        libdbd-sqlite3
        libffi-dev
        libssl-dev
        nautilus
        python3-dev
        python3-pip
        python3-venv
        screen
        sqlite3
        tmux
EOF
    )
    [printer]=$(tr -s [:space:] '&' <<EOF
        eog
        evince
        nautilus
        pdfshuffler
        pdftk
        xsane
EOF
    )
    [congy]=$(tr -s [:space:] '&' <<EOF
        eog
        nautilus
        openfortivpn
        remmina
EOF
    )
)


function old () {
    # action: create, update, delete
    ACTION=''
    VM=''
    while getopts "cudv:" OPTION; do
        case $OPTION in
            c)
                if [[ $ACTION == '' ]]; then
                    ACTION=CREATE
                else
                    echo "error - only one action"
                    print_help
                        exit 1
                fi
                ;;
            u)
                if [[ $ACTION == '' ]]; then
                    ACTION=UPDATE
                else
                    echo "error - only one action"
                    print_help
                    exit 1
                fi
                ;;
            d)
                if [[ $ACTION == '' ]]; then
                    ACTION=DELETE
                else
                    echo "error - only one action"
                    print_help
                    exit 1
                fi
                ;;
            v)
                if [[ $VM == '' ]]; then
                    VM=$OPTARG
                else
                    echo "error - only one vm"
                    print_help
                    exit 1
                fi
                ;;
            *)
                print_help
                exit 1
                ;;
        esac
    done

    if [ "$ACTION" == "" ] || [ "$VM" == "" ]; then
        echo "error - specify action and vm"
        print_help
        exit 1
    fi



    if [ "$DEBUG" ]; then echo "--VM:$VM, ACTION:$ACTION"; fi

    case $ACTION in
        CREATE)
            case $VM in
                min | vault)
                    if [ "$DEBUG" ]; then echo "--creating min/vault"; fi
                    TEMPLATE=${VM_TEMPLATE_NAMES[min]}
                    SOFTWARE=${VM_SOFT[min]}

                    create_template $TEMPLATE $SOFTWARE
                    create_min_appvms ${VM_TEMPLATE_NAMES[min]}
                    ;;
                media)
                    if [ "$DEBUG" ]; then echo "--creating media"; fi
                    TEMPLATE=${VM_TEMPLATE_NAMES[media]}
                    SOFTWARE=${VM_SOFT[media]}

                    create_template $TEMPLATE $SOFTWARE
                    create_media_appvms ${VM_TEMPLATE_NAMES[media]}
                    ;;
                dev)
                    if [ "$DEBUG" ]; then echo "--creating dev"; fi
                    TEMPLATE=${VM_TEMPLATE_NAMES[dev]}
                    SOFTWARE=${VM_SOFT[dev]}

                    create_template $TEMPLATE $SOFTWARE
                    create_dev_appvms ${VM_TEMPLATE_NAMES[dev]}
                    ;;
                plus)
                    if [ "$DEBUG" ]; then echo "--creating plus"; fi
                    TEMPLATE=${VM_TEMPLATE_NAMES[plus]}
                    SOFTWARE=${VM_SOFT[plus]}
                    
                    create_template $TEMPLATE $SOFTWARE
                    create_plus_appvms $TEMPLATE
                    ;;
                printer)
                    if [ "$DEBUG" ]; then echo "--creating printer"; fi
                    TEMPLATE=${VM_TEMPLATE_NAMES[printer]}
                    SOFTWARE=${VM_SOFT[printer]}
                    
                    create_template $TEMPLATE $SOFTWARE
                    install_printer_soft $TEMPLATE 
                    create_printer_appvms $TEMPLATE
                    ;;
                gpg)
                    if [ "$DEBUG" ]; then echo "--creating gpg"; fi
                    create_gpg
                    ;;
                vpn)
                    if [ "$DEBUG" ]; then echo "--creating vpn"; fi
                    create_vpn
                    ;;
                usb)
                    if [ "$DEBUG" ]; then echo "--creating usb"; fi
                    sudo qubesctl state.sls qvm.sys-usb
                    sudo qubesctl state.sls qvm.usb-keyboard
                    qvm-prefs sys-usb autostart False
                    echo -e "\n\n##############################\nSYS-USB\nRemove keyboard PCI from qube"
                    read R
                    ;;
                win)
                    make_win_vm
                    ;;
                *)
                    echo "ERROR: create: unknown vm: $VM"
                    exit 1
                    ;;
            esac
            ;;
        UPDATE)
            case $VM in
                min | vault)
                    if [ "$DEBUG" ]; then echo "--updating min/vault"; fi
                    TEMPLATE=${VM_TEMPLATE_NAMES[min]}
                    SOFTWARE=${VM_SOFT[min]}
                    qvm-start $TEMPLATE
                    update_template $TEMPLATE
                    install_software $TEMPLATE $SOFTWARE
                    qvm-shutdown $TEMPLATE
                    ;;
                media)
                    if [ "$DEBUG" ]; then echo "--updating media"; fi
                    TEMPLATE=${VM_TEMPLATE_NAMES[media]}
                    SOFTWARE=${VM_SOFT[media]}
                    qvm-start $TEMPLATE
                    update_template $TEMPLATE
                    install_software $TEMPLATE $SOFTWARE
                    qvm-shutdown $TEMPLATE
                    ;;
                dev)
                    if [ "$DEBUG" ]; then echo "--updating dev"; fi
                    TEMPLATE=${VM_TEMPLATE_NAMES[dev]}
                    SOFTWARE=${VM_SOFT[dev]}
                    qvm-start $TEMPLATE
                    update_template $TEMPLATE
                    install_software $TEMPLATE $SOFTWARE
                    qvm-shutdown $TEMPLATE
                    ;;
                plus)
                    if [ "$DEBUG" ]; then echo "--updating plus"; fi
                    TEMPLATE=${VM_TEMPLATE_NAMES[plus]}
                    SOFTWARE=${VM_SOFT[plus]}
                    qvm-start $TEMPLATE
                    update_template $TEMPLATE
                    install_software $TEMPLATE $SOFTWARE
                    qvm-shutdown $TEMPLATE
                    ;;
                printer)
                    if [ "$DEBUG" ]; then echo "--updating printer"; fi
                    TEMPLATE=${VM_TEMPLATE_NAMES[printer]}
                    SOFTWARE=${VM_SOFT[printer]}
                    qvm-start $TEMPLATE
                    update_template $TEMPLATE
                    install_software $TEMPLATE $SOFTWARE
                    qvm-shutdown $TEMPLATE
                    ;;
                all)
                    if [ "$DEBUG" ]; then echo "--updating all"; fi
                    for VM in "${!VM_TEMPLATE_NAMES[@]}"; do
                        TEMPLATE=${VM_TEMPLATE_NAMES[$VM]}
                        SOFTWARE=${VM_SOFT[$VM]}
                        qvm-start $TEMPLATE
                        update_template $TEMPLATE
                        install_software $TEMPLATE $SOFTWARE
                        qvm-shutdown $TEMPLATE
                    done
                    ;;
                *)
                    echo "ERROR: create: unknown vm: $VM"
                    exit 1
                    ;;
            esac
            ;;
        DELETE)
            ;;
    esac
    echo "...done"
}

main "$@"

