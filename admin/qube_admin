#!/bin/bash

# qube_admin
#
# automate the creation and updating of qubes
#
# Date: 2021.02.10
# Author: Andrew Ross
#


declare _MASTER_DEBIAN_TEMPLATE=debian-11
declare _MASTER_FEDORA_TEMPLATE=fedora-34
declare _CONFIGDIR="$(dirname $0)/config"
declare _UTILITYDIR="$(dirname $0)/utilities"
declare _SOFTWARE="$(dirname $0)/soft"

declare _USB00="dom0:00_14.0"
declare _USB01="dom0:04_00.0"

declare __notifylevel=2

source $(dirname "$0")/qubes_functions
set -e


function print_help() {
    echo "Usage:"
    echo "    qube_admin -l"
    echo "    qube_admin (-c | -u ) -t (template name|all) [-a (app vm name|all)]"
    echo "      where c:create, u:update"
    exit 1
}


function list_vm_names () {
    echo "Template names:"
    echo "${!VM_TEMPLATE_NAMES[@]}"
    echo 
    echo "App names:"
    echo "${!VM_CONFIG[@]}"
    echo
    exit 0
}



####################################################################
# Template functions
#


function template_master () {
    declare _templateconfig=$1
    declare _name_parts 

    _name_parts=(${_templateconfig//:/ })
    echo "${_name_parts[0]}"
}



function template_name () {
    declare _templateconfig=$1
    declare _name_parts 

    _name_parts=(${_templateconfig//:/ })
    if [ -z "${_name_parts[1]}" ]; then
        echo "${_name_parts[0]}"
    else
        echo "${_name_parts[0]}-${_name_parts[1]}"
    fi
}


function template_size () {
    declare _templateconfig=$1
    declare _name_parts 

    _name_parts=(${_templateconfig//:/ })
    echo "${_name_parts[2]}"
}


function create_all_templates () {
    declare _vm
    declare _softwarelist

    notify 2 "--create_all_templates"
    for _vm in "${!VM_TEMPLATE_NAMES[@]}"; do
        _templateconfig=${VM_TEMPLATE_NAMES[$_vm]}
        _softwarelist=${VM_SOFT[$_vm]}

        if create_template $_templateconfig $_softwarelist; then
            template_install_additions $_vm
        fi
    done

}


function update_all_templates () {
    declare _vm 
    declare _templateconfig
    declare _templatename
    declare _softwarelist

    notify 2 "--update_all_templates"
    for _vm in "${!VM_TEMPLATE_NAMES[@]}"; do
        _templateconfig=${VM_TEMPLATE_NAMES[$_vm]}
        _templatename=$(template_name $_templateconfig)
        _softwarelist=${VM_SOFT[$_vm]}

        qube_update $_templatename
        qube_install_software $_templatename $_softwarelist
        qvm-shutdown --wait $_templatename
    done

}


function create_template () {
    declare _templateconfig=$1
    declare _software=$2
    declare _master=$(template_master $_templateconfig)
    declare _template=$(template_name $_templateconfig)
    declare _template_size=$(template_size $_templateconfig)

    notify 1 "--create_template : _template:$_template, _software:$_software"
    
    if qube_exists $_template; then
        notify 2 "--create_template : exists _template:$_template"
        return 1  #false

    else
        notify 2 "--create_template : creating _template:$_template"
        qvm-clone $_master $_template
        if [ -n "$_template_size" ]; then
            qvm-volume extend $_template:root "${_template_size}GB"
        fi
        qube_update $_template
        qube_install_software $_template $_software

    fi

}


function template_install_additions () {
    declare _vm=$1
    declare _templateconfig=${VM_TEMPLATE_NAMES[$_vm]}
    declare _templatename=$(template_name $_templateconfig)

    notify 2 "--template_install_additions: $_templatename"
    case $_vm in
        debian)
            # base template - no additions
            ;;
        fedora)
            # base template - no additions
            ;;
        congy)
            build_congy_template $_templatename
            ;;
        dev)
            build_dev_template $_templatename
            ;;
        disp)
            build_disp_template $_templatename
            ;;
        media)
            build_media_template $_templatename
            ;;
        min)
            build_min_template $_templatename
            ;;
        plus)
            build_plus_template $_templatename
            ;;
        printer)
            build_printer_template $_templatename
            ;;
        usb)
            build_usb_template $_templatename
            ;;
        vpn)
            build_vpn_template $_templatename
            ;;
        zoom)
            build_zoom_template $_templatename
            ;;
        *)
            echo "ERROR: template_install_additions: unknown vm $_templatename"
            exit 1
            ;;
    esac
}



####################################################################
# Appvm functions
#


function create_all_appvms () {
    declare _templatevm=$1
    declare _appvm 
    declare _appconfig
    declare _configs
    declare _templatename

    notify 2 "--create_all_appvms, _template:$_templatevm"
    if [[ "$_templatevm" == "all" ]]; then
        for _appvm in "${!VM_CONFIG[@]}"; do
            if create_appvm $_appvm ${VM_CONFIG[$_appvm]}; then
                appvm_install_additions $_appvm
            fi
        done
    else
        for _appvm in "${!VM_CONFIG[@]}"; do
            _appconfig=${VM_CONFIG[$_appvm]}
            _configs=(${_appconfig//;/ })
            _templatename="${_configs[1]}"

            if [[ "${VM_TEMPLATE_NAMES[$_templatevm]}" == "$_templatename" ]]; then
                if create_appvm $_appvm ${VM_CONFIG[$_appvm]}; then
                    appvm_install_additions $_appvm
                fi
            fi
        done
    fi
}



function create_appvm () {
    declare _appvm=$1
    declare _configs=(${2//;/ })
    declare _vmtype=${_configs[0]}
    declare _templatename=$(template_name ${_configs[1]})
    declare _vmlabel=${_configs[2]}
    declare _maxmem=${_configs[3]}
    declare _mem=${_configs[4]}
    declare _storage=${_configs[5]}
    declare _vcpu=${_configs[6]}
    declare _netvm=${_configs[7]}
    declare _disp=${_configs[8]}

    # 0 type;1 template;2 lable;3 maxmem;4 memory;
    # 5 storage;6 vCPUs;7 network;8 disp"

    notify 2 "--create_appvm _appvm:$_appvm ${_configs[@]}"

    if [[ $(qube_exists $_appvm) ]]; then
        notify 2 "--create_appvm: exists _template:$_appvm"
        return 1  #false

    else
        qvm-create \
            --class $_vmtype \
            --template $_templatename \
            --label $_vmlabel \
            --prop=maxmem=$_maxmem \
            --prop=memory=$_mem \
            --prop=vcpus=$_vcpu \
            $_appvm

        qvm-prefs $_appvm qrexec_timeout 200

        if [[ $_storage != "x" ]]; then
            qvm-volume extend $_appvm:private ${_storage}mb
        fi
        
        if [[ $_netvm == "x" ]]; then
            qvm-prefs $_appvm netvm ""
        else
            qvm-prefs $_appvm netvm $_netvm 
        fi
        
        if [[ $_disp -eq "1" ]]; then
            qvm-prefs $_appvm template_for_dispvms True
        fi
    fi
}



function appvm_install_additions () {
    declare _appvm=$1

    notify 2 "--appvm_install_additions: $_appvm"
    case $_appvm in
        congy)
            build_congy_appvm $_appvm
            ;;
        dev)
            build_dev_appvm $_appvm
            ;;
        study)
            build_dev_appvm $_appvm
            ;;
        email)
            build_email_appvm $_appvm
            ;;
        epub)
            build_epub_appvm $_appvm
            ;;
        fedora-disp)
            build_fedoradisp_appvm $_appvm
            ;;
        fedora-disp-big)
            build_fedoradisp_appvm $_appvm
            ;;
        files)
            build_files_appvm $_appvm
            ;;
        fin)
            build_fin_appvm $_appvm
            ;;
        gpg)
            build_gpg_appvm $_appvm
            ;;
        media)
            build_media_appvm $_appvm
            ;;
        printer-disp)
            build_printer_disp $_appvm
            ;;
        sys-vpn-ca)
            build_vpnca $_appvm
            ;;
        sys-vpn-ro)
            build_vpnro $_appvm
            ;;
        usb)
            ;;
        vpn-disp)
            build_vpn_disp $_appvm
            ;;
        vpn-disp-big)
            build_vpn_disp $_appvm
            ;;
        work)
            build_work_appvm $_appvm
            ;;
        plus-disp)
            build_plus_disp $_appvm
            ;;
        zoom)
            build_zoom_appvm $_appvm
            ;;
        *)
            echo "ERROR: appvm_install_additions: unknown vm $_appvm"
            exit 1
            ;;
    esac
}



function config_template_firefox () {
    declare _vm=$1
    declare _firefoxdir
    declare _f

    notify 2 "--config_firefox _appvm:$_vm"

    _ostype=$( qube_get_distribution $_vm )
    case $_ostype in
        "debian")
            _firefoxdir="/etc/firefox-esr"
            ;;

        "fedora")
            _firefoxdir="/etc/firefox/pref"
            ;;
        *)
            notify 0 "ERROR: qube_update: unknown OStype:$_ostype"
            exit 1
    esac

    for _f in \
        syspref.js \
        bookmarks.html ;
    do
        qube_copy_file \
            $_vm \
            "root" \
            "$_CONFIGDIR/firefox/$_f" \
            "$_firefoxdir/$_f"
    done

}



function config_user_firefox () {
    declare _appvm=$1
    declare _commands

    notify 2 "--config_firefox_addons _appvm:$_appvm"

}



function config_user () {
    declare _appvm=$1
    declare _commands
    declare _filename
    declare _lines

    notify 2 "--config_user _appvm:$_appvm"
    qvm-start --skip-if-running $_appvm
    sleep 1

    # nautilus config
    _commands=$(cat <<EOF
        dconf write /org/gnome/nautilus/list-view/default-zoom-level \'small\'
        dconf write /org/gnome/nautilus/list-view/use-tree-view true
        dconf write /org/gnome/nautilus/preferences/default-folder-viewer \'list-view\'
        dconf write /org/gtk/settings/file-chooser/expand-folders true
        dconf write /org/gtk/settings/file-chooser/sort-directories-first true
        dconf write /org/gnome/terminal/legacy/theme-variant \"\'dark\'\"

EOF
)

    qube_run_commands $_appvm "user" "$_commands"

    _lines=$(cat <<EOF
alias rm="rm -i"
alias trash="gio trash"
alias pvc="python3.7 -m venv venv"
alias pva="source ./venv/bin/activate"

export EDITOR="/usr/bin/vim"
export QUBES_GPG_DOMAIN=gpg
export GOPATH=$HOME/go

EOF
)
    qube_append_file \
        $_appvm \
        "user" \
        "/home/user/.bashrc" \
        "$_lines"

    for _f in \
        _vimrc \
        _screenrc ;
    do
        _filename=$(echo $_f | tr '_' '.')
        qube_copy_file \
            $_appvm \
            "user" \
            "$_CONFIGDIR/dotfiles/$_f" \
            "/home/user/$_filename"
    done
}



####################################################################
# Template / Appvm builds
#

function build_dev_template () {
    declare _vm=$1

    config_template_firefox $_vm

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}



function build_dev_appvm () {
    declare _vm=$1
    declare _f
    declare _lines

    notify 2 "--build_dev_appvm $_vm"

    qvm-start --skip-if-running $_vm
    sleep 1

    config_user $_vm
    config_user_firefox $_vm

    for _f in \
        appendPDF \
        doublePDF \
        img2pdf \
        randomChars.py ;
    do
        qube_copy_file \
            $_vm \
            "root" \
            "$_UTILITYDIR/$_f" \
            "/usr/local/bin/$_f"
    done
    for _f in \
        python3_install \
        go_install; 
    do
        qube_copy_file \
            $_vm \
            "user" \
            "$_CONFIGDIR/$_f" \
            "/home/user/$_f"
    done

    _lines=$(cat <<EOF
[user]
name = Andrew Ross
email = 
signingkey = 

[core]
editor = vim

[gpg]
program = qubes-gpg-client-wrapper

[commit]
gpgsign = true
verbose = true

EOF
)
    qube_append_file \
        $_vm \
        "root" \
        "/home/user/.gitconfig" \
        "$_lines"

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}



function build_zoom_appvm () {
    declare _vm=$1

    qvm-prefs $_vm virt_mode hvm

    config_user $_vm
    config_user_firefox $_vm

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
    qvm-pci attach \
        $_vm \
        $_USB00 \
        --persistent 
}



function build_congy_template () {
    declare _vm=$1
    declare _debpath
    declare _deb

    notify 2 "--create_congy_template: $_vm"

    config_template_firefox $_vm

    for _f in \
        teams \
        slack ;
    do
        _debpath=$(ls -t $_SOFTWARE/$_f* | head -1)
        _deb=$(basename $_debpath)
        qube_copy_file \
            $_vm \
            "root" \
            "$_SOFTWARE/$_deb" \
            "/tmp/$_deb"
        qvm-run \
            $__qvm_run_options \
            -u root \
            $_vm \
            "dpkg -i /tmp/$_deb" || true
    done
    qvm-run \
        $__qvm_run_options \
        -u root \
        $_vm \
        "sudo apt-get install -yf"

    qube_copy_file \
        $_vm \
        "root" \
        "$_CONFIGDIR/congy/openfortivpn.service" \
        "/etc/systemd/system/openfortivpn.service"
    qvm-run \
        $__qvm_run_options \
        -u root \
        $_vm \
        "chmod +x /etc/systemd/system/openfortivpn.service"
    qvm-run \
        $__qvm_run_options \
        -u root \
        $_vm \
        "systemctl enable openfortivpn"

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}



function build_congy_appvm () {
    declare _vm=$1
    declare _bashlines
    declare _commands

    qvm-prefs $_vm virt_mode hvm 

    config_user $_vm
    config_user_firefox $_vm

    _commands=$(cat <<EOF
        mkdir -p /rw/config/qubes-bind-dirs.d
        mkdir -p /etc/openfortivpn
EOF
)
    qube_run_commands $_vm "root" "$_commands"

    qube_copy_file \
        $_vm \
        "user" \
        "$_CONFIGDIR/congy/vpn.config.secret" \
        "/home/user/config"

    qube_copy_file \
        $_vm \
        "root" \
        "$_CONFIGDIR/congy/50_user.conf" \
        "/rw/config/qubes-bind-dirs.d/50_user.conf"

    _bashlines=$(cat <<EOF
#!/bin/bash

/usr/bin/slack -s &
/usr/bin/remmina &
/usr/bin/firefox &
gvim /home/user/firstDay.notes &

EOF
)

	qube_write_file \
		$_vm \
		"user" \
        "/home/user/startup" \
        "$_bashlines"

    _commands=$(cat <<EOF
        mkdir -p /home/user/mounts/aross-d1
        mkdir -p /home/user/.local/share/remmina
        chmod +x /home/user/startup
EOF
)
    qube_run_commands $_vm "user" "$_commands"
    qube_copy_file \
        $_vm \
        "user" \
        "$_CONFIGDIR/congy/group_rdp_congy.remmina.secret" \
        "/home/user/.local/share/remmina/group_rdp_congy.remmina"

    _bashlines=$(cat <<EOF
        alias aross-d1="sudo mount -t cifs -o username=aross //aross-d1.congruex.com/c$/Users/aross/Downloads /home/user/mounts/aross-d1 -o uid=1000,gid=1000"
        alias um-aross-d1="sudo umount /home/user/mounts/aross-d1"

EOF
)
    qube_append_file \
        $_appvm \
        "user" \
        "/home/user/.bashrc" \
        "$_bashlines"

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
    #qvm-pci attach \
    #    $_vm \
    #    $_USB01 \
    #    --persistent 
}



function build_disp_template () {
    declare _vm=$1

    config_template_firefox $_vm

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}


function build_fedoradisp_appvm () {
    declare _vm=$1

    config_user $_vm

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
    qvm-features $_vm appmenus-dispvm 1
}


function build_media_template () {
    declare _vm=$1

    config_template_firefox $_vm

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}

function build_media_appvm () {
    declare _vm=$1

    config_user $_vm

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}


function build_min_template () {
    declare _vm=$1

    # config for thunderbird dates
    _commands=$(cat <<EOF
        ln -s /usr/share/i18n/locales/en_DK /usr/share/i18n/locales/en_SE
        echo 'en_SE.UTF-8 UTF-8' | tee -a /etc/locale.gen
        locale-gen
EOF
)
    qube_run_commands \
        $_vm \
        "root" \
        "$_commands"

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}

function build_email_appvm () {
    declare _vm=$1

    for _f in \
        thunderbird_timefix ;
    do
        qube_copy_file \
            $_vm \
            "root" \
            "$_CONFIGDIR/email/$_f" \
            "/usr/local/bin/$_f"
    done

    build_min_appvm $_vm

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}

function build_files_appvm () {
    declare _vm=$1

    build_min_appvm $_vm

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}

function build_fin_appvm () {
    declare _vm=$1

    for _f in \
        mntv ;
    do
        qube_copy_file \
            $_vm \
            "root" \
            "$_UTILITYDIR/$_f" \
            "/usr/local/bin/$_f"
    done

    build_min_appvm $_vm

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}

function build_gpg_appvm () {
    # https://www.qubes-os.org/doc/split-gpg/
    declare _vm=$1

    qube_append_file \
        $_vm \
        "user" \
        "/home/user/.bash_profile" \
        "export QUBES_GPG_AUTOACCEPT=10800"

    build_min_appvm $_vm

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}

function build_min_appvm () {
    declare _vm=$1

    config_user $_vm

    for _f in \
        appendPDF \
        doublePDF \
        img2pdf \
        randomChars.py; 
    do
        qube_copy_file \
            $_vm \
            "root" \
            "$_UTILITYDIR/$_f" \
            "/usr/local/bin/$_f"
    done

}


function build_plus_template () {
    declare _vm=$1

    config_template_firefox $_vm

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}


function build_epub_appvm () {
    declare _vm=$1

    config_user $_vm

    for _f in \
        appendPDF \
        doublePDF \
        img2pdf \
        randomChars.py; 
    do
        qube_copy_file \
            $_vm \
            "root" \
            "$_UTILITYDIR/$_f" \
            "/usr/local/bin/$_f"
    done

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}


function build_work_appvm () {
    declare _vm=$1

    config_user $_vm

    for _f in \
        appendPDF \
        doublePDF \
        img2pdf \
        randomChars.py; 
    do
        qube_copy_file \
            $_vm \
            "root" \
            "$_UTILITYDIR/$_f" \
            "/usr/local/bin/$_f"
    done

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}


function build_plus_disp () {
    declare _vm=$1

    config_user $_vm

    for _f in \
        appendPDF \
        doublePDF \
        img2pdf \
        randomChars.py; 
    do
        qube_copy_file \
            $_vm \
            "root" \
            "$_UTILITYDIR/$_f" \
            "/usr/local/bin/$_f"
    done

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
    qvm-features $_vm appmenus-dispvm 1
}


function build_printer_template () {
    declare _vm=$1
    declare _tgzpath
    declare _print_tgz
    declare _print_sh
    declare _commands
    declare _im_policy=/etc/ImageMagick-6/policy.xml 

    notify 2 "--build_printer_template: _vm:$_vm"

    config_template_firefox $_vm

    _tgzpath=$(ls -t $_SOFTWARE/*brprint* | head -1)
    _print_tgz=$(basename $_tgzpath)
    _print_sh="${_print_tgz%.*}"

    qvm-copy-to-vm $_vm "$_SOFTWARE/$_print_tgz"

    notify 1 "--Install printer soft: model number MFCL2710DW"
    qvm-prefs $_vm netvm "sys-firewall"

    _commands=$(cat <<EOF
        gunzip /home/user/QubesIncoming/dom0/$_print_tgz
        bash /home/user/QubesIncoming/dom0/$_print_sh
        sed -i '/<\/policymap>/d' $_im_policy
EOF
)
    qube_run_commands $_vm "root" "$_commands"

    _commands=$(cat <<EOF
  <policy domain="coder" rights="read|write" pattern="PDF" />
</policymap>

EOF
)
    qube_append_file \
        $_vm \
        "root" \
        "$_im_policy" \
        "$_commands"

    qvm-prefs $_vm netvm ""
    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm 
}


function build_printer_disp () {
    declare _vm=$1

    config_user $_vm

    for _f in \
        appendPDF \
        doublePDF \
        img2pdf \
        printBro \
        scanBro ;
    do
        qube_copy_file \
            $_vm \
            "root" \
            "$_UTILITYDIR/$_f" \
            "/usr/local/bin/$_f"
    done

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
    qvm-features $_vm appmenus-dispvm 1
}


function build_usb_template () {
    declare _vm=$1

    config_template_firefox $_vm

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}



function build_zoom_template () {
    declare _vm=$1

    config_template_firefox $_vm

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}



function build_vpn_template () {
    declare _vm=$1
    notify 2 "--build_vpn_template: _vm:$_vm"

    config_template_firefox $_vm
    #qvm-run \
    #    $__qvm_run_options \
    #    -u root \
    #    $_vm \
	#	"systemctl disable openvpn.service"

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}

function build_vpnca () {
    declare _vm=$1

    notify 2 "--build_vpnca: _vm:$_vm"

    qube_copy_file \
        $_vm \
        "user" \
        "$_CONFIGDIR/vpn/ca.ovpn.secret" \
        "/tmp/vpn.ovpn"

	build_vpn_server $_vm
    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
}

function build_vpnro () {
    declare _vm=$1

    notify 2 "--build_vpnro: _vm:$_vm"

    qube_copy_file \
        $_vm \
        "user" \
        "$_CONFIGDIR/vpn/ro.ovpn.secret" \
        "/tmp/vpn.ovpn"

	build_vpn_server $_vm
    qube_remove_incomming $_vm
    #qvm-shutdown --wait $_vm
}

function build_vpn_server () {
    # https://github.com/Qubes-Community/Contents/blob/master/docs/configuration/vpn.md
    declare _vm=$1
	declare _commands
	declare _text

    qvm-prefs $_vm provides_network True

    qvm-run \
        $__qvm_run_options \
        -u root \
        $_vm \
        "mkdir -p /rw/config/vpn"
		
    _text=$(cat <<EOF
#!/bin/bash
set -e
export PATH="\$PATH:/usr/sbin:/sbin"
export vpn_dns="8.8.8.8 8.8.4.4"

case "\$1" in

up)
    # To override DHCP DNS, assign DNS addresses to 'vpn_dns' env variable before calling this script;
    # Format is 'X.X.X.X  Y.Y.Y.Y [...]'
    if [[ -z "\$vpn_dns" ]] ; then
        # Parses DHCP foreign_option_* vars to automatically set DNS address translation:
        for optionname in \${!foreign_option_*} ; do
            option="\${!optionname}"
            unset fops; fops=(\$option)
            if [ \${fops[1]} == "DNS" ] ; then vpn_dns="\$vpn_dns \${fops[2]}" ; fi
        done
    fi

    iptables -t nat -F PR-QBS
    if [[ -n "\$vpn_dns" ]] ; then
        # Set DNS address translation in firewall:
        for addr in \$vpn_dns; do
            iptables -t nat -A PR-QBS -i vif+ -p udp --dport 53 -j DNAT --to \$addr
            iptables -t nat -A PR-QBS -i vif+ -p tcp --dport 53 -j DNAT --to \$addr
        done
        su - -c 'notify-send "\$(hostname): LINK IS UP" --icon=network-idle' user
    else
        su - -c 'notify-send "\$(hostname): LINK UP, NO DNS" --icon=dialog-error' user
    fi

;;
down)
    su - -c 'notify-send "\$(hostname): LINK IS DOWN" --icon=dialog-error' user

    # Restart the VPN automatically
    sleep 5s
    sudo /rw/config/rc.local
    ;;
esac

EOF
)
	qube_write_file \
		$_vm \
		"root" \
		/rw/config/vpn/qubes-vpn-handler.sh \
        "$_text"

    _text=$(cat <<EOF
#!/bin/bash
#    Block forwarding of connections through upstream network device
#    (in case the vpn tunnel breaks):
iptables -I FORWARD -o eth0 -j DROP
iptables -I FORWARD -i eth0 -j DROP
ip6tables -I FORWARD -o eth0 -j DROP
ip6tables -I FORWARD -i eth0 -j DROP

#    Accept traffic to VPN
iptables -P OUTPUT ACCEPT
iptables -F OUTPUT

#    Add the \`qvpn\` group to system, if it doesn't already exist
if ! grep -q "^qvpn:" /etc/group ; then
     groupadd -rf qvpn
     sync
fi
sleep 2s

#    Block non-VPN traffic to clearnet
iptables -I OUTPUT -o eth0 -j DROP
#    Allow traffic from the \`qvpn\` group to the uplink interface (eth0);
#    Our VPN client will run with group \`qvpn\`.
iptables -I OUTPUT -p all -o eth0 -m owner --gid-owner qvpn -j ACCEPT

EOF
)
	qube_write_file \
		$_vm \
		"root" \
		/rw/config/qubes-firewall-user-script \
        "$_text"
        
    _text=$(cat <<EOF
#!/bin/bash
VPN_CLIENT='openvpn'
VPN_OPTIONS='--cd /rw/config/vpn/ --config openvpn-client.ovpn --daemon'

su - -c 'notify-send "\$(hostname): Starting \$VPN_CLIENT..." --icon=network-idle' user
groupadd -rf qvpn ; sleep 2s
sg qvpn -c "\$VPN_CLIENT \$VPN_OPTIONS"

EOF
)
	qube_write_file \
		$_vm \
		"root" \
		/rw/config/rc.local \
        "$_text"

    _commands=$(cat <<EOF
		mv /tmp/vpn.ovpn /rw/config/vpn/openvpn-client.ovpn
		sudo chmod +x /rw/config/vpn/qubes-vpn-handler.sh
		sudo chmod +x /rw/config/qubes-firewall-user-script
		sudo chmod +x /rw/config/rc.local
EOF
)
    qube_run_commands \
        $_vm \
        "root" \
        "$_commands"


}

function build_vpn_disp () {
    declare _vm=$1
    declare _startupscript="/home/user/startup"
    declare _text

    notify 2 "--build_vpn_disp: _vm:$_vm"
    _netvm=$(qvm-prefs $_vm netvm)
    notify 2 "--netvm: $_netvm"
    qvm-prefs $_vm netvm ""

    config_user $_vm
    config_template_firefox $_vm

    _text=$(cat <<EOF
#!/bin/bash

firefox \
     "https://www.iplocation.net/" \
     "https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/" \
     "https://addons.mozilla.org/en-US/firefox/addon/privacy-badger17/" &
nautilus &
deluge &

EOF
)
	qube_write_file \
		$_vm \
		"user" \
        "$_startupscript" \
        "$_text"

    qvm-run $__qvm_run_options \
        -u user \
        $_vm \
        "chmod +x $_startupscript"

    qube_remove_incomming $_vm
    qvm-shutdown --wait $_vm
    qvm-prefs $_vm netvm $_netvm
    qvm-features $_vm appmenus-dispvm 1

}



####################################################################
# old

function create_vpn () {
    declare _vpnvm=sys-vpn-ro
    declare _apptemplate=debian-9-plus
    declare _vpnappdvm=vpn-disp

    notify 2 "--create_vpn: _vpnvm:$_vpnvm, _systemplate:$_SYSTEMPLATE, _apptemplate:$_apptemplate"

    qvm-create --class AppVM \
        --template $_SYSTEMPLATE \
        --label red \
        --prop=maxmem=500 \
        --prop=memory=500 \
        --prop=netvm=sys-net \
        --prop=vcpus=2 \
        --prop=provides_network=True \
        $_vpnvm
    qube_copy_file \
        $_vpnvm \
        "user" \
        "$_CONFIGDIR/vpn.ovpn" \
        "/tmp/vpn.ovpn"
    qube_copy_file \
        $_vpnvm \
        "user" \
        "$_CONFIGDIR/configure_vpn" \
        "/tmp/configure_vpn"
    qvm-run $__qvm_run_options \
        -u root \
        $_vpnvm \
        "bash /tmp/configure_vpn"
    qvm_wait_shutdown $_vpnvm

    notify 2 "--create_vpn: _vpnappdvm:$_vpnappdvm"

    qvm-create --class AppVM \
        --template $_apptemplate \
        --label red \
        --prop=maxmem=2048 \
        --prop=memory=1024 \
        --prop=netvm=$_vpnvm \
        $_vpnappdvm
    qvm-prefs $_vpnappdvm template_for_dispvms True
    qvm-features $_vpnappdvm appmenus-dispvm 1
    qvm-start $_vpnappdvm

    qube_copy_file \
        $_vpnappdvm \
        "user" \ 
        "$_CONFIGDIR/configure_vpn_client" \
        "/tmp/configure_vpn_client"

    notify 0 "  configuring appvm $_vpnappdvm: install firefox addons, set/fix firefox homepage, set cache"
    qvm-run $__qvm_run_options \
        -u root \
        $_vpnappdvm \
        "bash /tmp/configure_vpn_client"
    qvm-shutdown --wait $_vpnappdvm 
}


function install_printer_soft () {
    local TEMPLATE=$1
    local brotherinst=linux-brprinter-installer-2.2.1-1

    notify 1 "--install_printer_soft TEMPLATE:$TEMPLATE"
    sleep 5 # wait for install to complete

    qvm-shutdown --wait $TEMPLATE
    qvm-prefs $TEMPLATE netvm sys-firewall
    qvm-start $TEMPLATE

    echo "qvm-copy-to-vm $TEMPLATE $_CONFIGDIR/$brotherinst.gz"
    qvm-copy-to-vm $TEMPLATE $_CONFIGDIR/$brotherinst.gz
    echo "--Install printer soft: model number MFCL2710DW"
    qvm-run -p $TEMPLATE "gunzip /home/user/QubesIncoming/dom0/$brotherinst.gz"
    qvm-run -p -u root $TEMPLATE "bash /home/user/QubesIncoming/dom0/$brotherinst"
    qvm-run -p $TEMPLATE "rm -rf /home/user/QubesIncoming"
    qvm-run -p $TEMPLATE "rm -f /home/user/*.deb"
    qvm-run -p $TEMPLATE "rm -f /home/user/uninstaller*"

    qvm-shutdown --wait $TEMPLATE 
    qvm-prefs $TEMPLATE netvm ''
}


function create_printer_appvms() {
    local TEMPLATE=$1

    # create printer disp
    local appvm=printer-disp
    check_vm $appvm

    qvm-create --class AppVM --template $TEMPLATE --label red --prop=maxmem=2048 --prop=memory=400 $appvm
    qvm-prefs $appvm template_for_dispvms True
    qvm-features $appvm appmenus-dispvm 1

    qvm-start $appvm
    qvm-copy-to-vm $appvm $_CONFIGDIR/scanBro
    qvm-run -p -u root $appvm "cp /home/user/QubesIncoming/dom0/scanBro /usr/local/bin/"
    qvm-run -p -u root $appvm "chmod +x /usr/local/bin/scanBro"
    qvm-copy-to-vm $appvm $_CONFIGDIR/printBro
    qvm-run -p -u root $appvm "cp /home/user/QubesIncoming/dom0/printBro /usr/local/bin/"
    qvm-run -p -u root $appvm "chmod +x /usr/local/bin/printBro"
    qvm-copy-to-vm $appvm $_CONFIGDIR/combine_doublesided
    qvm-run -p -u root $appvm "cp /home/user/QubesIncoming/dom0/combine_doublesided /usr/local/bin/"
    qvm-run -p -u root $appvm "chmod +x /usr/local/bin/combine_doublesided"
    qvm-copy-to-vm $appvm $_CONFIGDIR/img2pdf
    qvm-run -p -u root $appvm "cp /home/user/QubesIncoming/dom0/img2pdf /usr/local/bin/"
    qvm-run -p -u root $appvm "chmod +x /usr/local/bin/img2pdf"

    qvm-run -p $appvm  "rm -rf /home/user/QubesIncoming"
    qvm-shutdown --wait $appvm
}



function main () {
    declare _action
    declare _appvm
    declare _templatevm
    declare _templatename
    declare _softwarelist

    while getopts "lcut:a:" opt; do
        case $opt in
            l)
                list_vm_names
                ;;
            c)
                _action="create"
                ;;
            u)
                _action="update"
                ;;
            t)
                _templatevm=$OPTARG
                ;;
            a)
                _appvm=$OPTARG
                ;;
            :)
                echo "Option -$OPTARG requires argument"
                print_help
                ;;
            \?)
                echo "Invalid option: -$OPTARG"
                print_help
                ;;
        esac
    done

    echo "opt: $opt, action:$_action, tpl:$_templatevm, app:$_appvm"

    if [ -z "$_action" ] || [ -z "$_templatevm" ]; then
        print_help
    fi

    if [ "$_templatevm" != "all" ] && [ ! "${VM_TEMPLATE_NAMES[$_templatevm]+_}" ]; then 
        notify 2 "ERROR: unknown template vm $_templatevm"
        exit 1
    fi

    if [ ! -z "$_appvm" ]; then
        if [ "$_appvm" != "all" ] && [ ! "${VM_CONFIG[$_appvm]+_}" ]; then 
            notify 2 "ERROR: unknown app vm $_appvm"
            exit 1
        fi
    fi

    notify 2 "--main : action:$_action, template:$_templatevm, appvm:$_appvm"

    case $_action in 
        create)
            if [[ "$_templatevm" == "all" ]]; then
                create_all_templates
            else
                _templateconfig=${VM_TEMPLATE_NAMES[$_templatevm]}
                _softwarelist=${VM_SOFT[$_templatevm]}

                if create_template $_templateconfig $_softwarelist; then
                    template_install_additions $_templatevm
                fi
            fi

            if [ -n "$_appvm" ]; then
                if [[ "$_appvm" == "all" ]]; then
                    create_all_appvms $_templatevm
                else
                    if create_appvm $_appvm ${VM_CONFIG[$_appvm]}; then
                        appvm_install_additions $_appvm
                    fi
                fi
            fi
            ;;
        update)
            if [[ "$_templatevm" == "all" ]]; then
                update_all_templates
            else
                _templateconfig=${VM_TEMPLATE_NAMES[$_templatevm]}
                _templatename=$(template_name $_templateconfig)
                _softwarelist=${VM_SOFT[$_templatevm]}

                qube_update $_templatename
                qube_install_software $_templatename $_softwarelist
                qvm-shutdown --wait $_templatename
            fi
            ;;
        *) 
            echo "ERROR: unknown action: $_action"
            print_help
            ;;
    esac

}



declare -A VM_SOFT
declare -A VM_TEMPLATE_NAMES
declare -A VM_CONFIG

VM_TEMPLATE_NAMES=( 
    [debian]="$_MASTER_DEBIAN_TEMPLATE::"
    [fedora]="$_MASTER_FEDORA_TEMPLATE::"
    [congy]="$_MASTER_DEBIAN_TEMPLATE:congy:"
    [dev]="$_MASTER_DEBIAN_TEMPLATE:dev:"
    [disp]="$_MASTER_FEDORA_TEMPLATE:disp:"
    [media]="$_MASTER_DEBIAN_TEMPLATE:media:"
    [min]="$_MASTER_DEBIAN_TEMPLATE:min:"
    [plus]="$_MASTER_DEBIAN_TEMPLATE:plus:15"
    [printer]="$_MASTER_DEBIAN_TEMPLATE:printer:"
    #[usb]="$_MASTER_FEDORA_TEMPLATE:usb:"
    [vpn]="$_MASTER_FEDORA_TEMPLATE:vpn:"
)


VM_CONFIG=( # "type;template;lable;maxmem;memory;storage;vCPUs;network;disp"
    [congy]="AppVM;${VM_TEMPLATE_NAMES[congy]};orange;0;4000;x;4;sys-firewall;0"
    [dev]="AppVM;${VM_TEMPLATE_NAMES[dev]};yellow;4000;400;10000;2;x;0"
    [email]="AppVM;${VM_TEMPLATE_NAMES[min]};blue;2000;600;15000;2;sys-firewall;0"
    [files]="AppVM;${VM_TEMPLATE_NAMES[min]};blue;800;400;150000;1;x;0"
    [fin]="AppVM;${VM_TEMPLATE_NAMES[min]};purple;1024;400;x;1;x;0"
    [gpg]="AppVM;${VM_TEMPLATE_NAMES[min]};purple;800;400;x;1;x;0"
    [epub]="AppVM;${VM_TEMPLATE_NAMES[plus]};green;2000;500;50000;1;x;0"
    [work]="AppVM;${VM_TEMPLATE_NAMES[plus]};green;4000;400;x;2;x;0"
    [study]="AppVM;${VM_TEMPLATE_NAMES[plus]};green;4000;400;5000;2;sys-firewall;0"
    [plus-disp]="AppVM;${VM_TEMPLATE_NAMES[plus]};red;2000;600;x;2;sys-firewall;1"
    [fedora-disp]="AppVM;${VM_TEMPLATE_NAMES[disp]};red;2000;600;x;2;sys-firewall;1"
    [fedora-disp-big]="AppVM;${VM_TEMPLATE_NAMES[disp]};red;2000;600;10000;2;sys-firewall;1"
    #[sys-vpn-ca]="AppVM;${VM_TEMPLATE_NAMES[vpn]};orange;500;400;x;1;sys-net;0"
    [sys-vpn-ro]="AppVM;${VM_TEMPLATE_NAMES[vpn]};orange;500;400;x;1;sys-net;0"
    [vpn-disp]="AppVM;${VM_TEMPLATE_NAMES[vpn]};red;4000;400;9216;2;x;1"
    [vpn-disp-big]="AppVM;${VM_TEMPLATE_NAMES[vpn]};red;4000;400;28672;2;x;1"
    [media]="AppVM;${VM_TEMPLATE_NAMES[media]};green;8192;1024;30720;2;sys-firewall;0"
    [printer-disp]="AppVM;${VM_TEMPLATE_NAMES[printer]};red;974;350;x;1;sys-firewall;1"
    #[usb]="AppVM;${VM_TEMPLATE_NAMES[usb]};orange;4000;2000;22528;3;sys-firewall;0"
    [zoom]="AppVM;${VM_TEMPLATE_NAMES[plus]};orange;0;4000;x;4;sys-firewall;0"
    )

VM_SOFT=( 
    [plus]=$(tr -s [:space:] '&' <<EOF
        audacity
        calibre
        cheese
        chromium
        curl
        eog
        exiftool
        ffmpeg
        gimp
        git
        gnucash
        inkscape
        jmtpfs
        lame
        libdbd-sqlite3
        librecad
        libreoffice
        nautilus
        pdfarranger
        pdftk
        python3-pip
        remmina
        rsync
        screen
        texlive 
        texlive-fonts-extra 
        texlive-fonts-recommended 
        texlive-latex-base 
        texlive-latex-extra 
        texlive-latex-recommended 
        tmux
        vim-gtk
        vlc
        xournal
        xsane
EOF
    )
    [media]=$(tr -s [:space:] '&' <<EOF
        chromium
        eog
        rsync
        kodi
        libavcodec-extra
        nautilus
        vlc
EOF
    )
    [min]=$(tr -s [:space:] '&' <<EOF
        eog
        evince
        gnucash
        gocryptfs
        gpg
        libdbd-sqlite3
        nautilus
        pdftk
        qubes-gpg-split
        rsync
        scrypt
EOF
    )
    [dev]=$(tr -s [:space:] '&' <<EOF
        build-essential
        chromium
        curl
        git
        gnucash
        gvim
        libdbd-sqlite3
        libffi-dev
        libssl-dev
        nautilus
        python3-dev
        python3-pip
        python3-venv
        rsync
        screen
        sqlite3
        tmux
EOF
    )
    [printer]=$(tr -s [:space:] '&' <<EOF
        eog
        evince
        exiftool
        gimp
        nautilus
        pdfarranger
        pdftk
        xsane
EOF
    )
    [vpn]=$(tr -s [:space:] '&' <<EOF
        chromium
        deluge
        eog
        nautilus
        openvpn
EOF
    )
    [congy]=$(tr -s [:space:] '&' <<EOF
        cheese
        chromium
        cifs-utils
        eog
        git
        nautilus
        openfortivpn
        pdftk
        qubes-usb-proxy
        remmina
        rsync
        vim-gtk
EOF
    )
)


main "$@"



# todo
# qvm-appmenus printer


