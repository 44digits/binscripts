#!/bin/bash

# qubes_functions
#
# Helper functions to assist qubes administration scripts
# to be run in dom0
#
# Date: 2019.09.18
#

declare __qvm_run_options="${__qvm_run_options:-"-p --color-stderr=37"}"
declare __notifylevel="${__notifylevel:-2}"

declare FAST=0

function notify () {
    declare _level=$1
    if [[ "$__notifylevel" -ge "$_level" ]]; then
        cat <<< "${@:2}" 1>&2
    fi
}


function __zenity_fix () {
    zenity "$@" 2>/dev/null
}


function zenity_list () {
    options=( "$@" )
    COLUMNS=1; select opt in "${options[@]}"; do
        echo $opt
        break
    done
}


function wait_qube_startup () {
    declare _vm=$1
    declare _state=$(qube_get_state $_vm)

    while [ "$_state" != "Running" ]; do
        _state=$(qube_get_state $_vm)
        echo "... received --$_state--"
        sleep 2
    done
}


function qube_get_state () {
    declare _vm=$1
    declare _state

    _state=$(qvm-ls -n --fields=STATE,NAME \
        | grep -E "\s$_vm$" \
        | cut -d' ' -f 1)

    notify 2 "qube_get_state: $_vm $_state"
    echo $_state
}



function qube_exists () {
    declare _vm=$1

    (qvm-ls --raw-list | grep -e "^$_vm$") && return
    
}



function qube_get_distribution () {
    declare _vm=$1
    declare _distribution
    declare _cmd
    
    _cmd=$(tr -s [:space:] <<EOF | tr -d '\n' 
        cat /etc/os-release 
            | grep -G "^ID" 
            | cut -d'=' -f2
EOF
)
    
    _distribution=$(qvm-run \
        -p \
        -u user \
        "$_vm" \
        "$_cmd"
        )
    echo $_distribution
}



function qube_get_disposable_vm () {
    notify 2 "qube_get_disposable_vm starting... $1"
    declare _disp_template=$1
    declare _disp_list_pre=$(qvm-ls --raw-list --running | grep disp)
    declare _disp_list_post
    declare _disp_count_current=$(echo "$_disp_list_pre" | wc -w)
    declare _disp_count_final=$(( $_disp_count_current +1 ))
    declare _disp_vm

    notify 2 "qube_get_disposable_vm step 2... $1"

    qvm-run --dispvm=$_disp_template "xterm" >/dev/null 2>&1 &

    while [[ $_disp_count_current != $_disp_count_final ]]; do
        
        notify 2 "qube_get_disposable_vm loop "
        sleep 2
        _disp_count_current=$(qvm-ls --raw-list --running \
            | grep disp \
            | wc -w )
    done

    _disp_list_post=$(qvm-ls --raw-list --running | grep disp)
    _disp_vm=$(comm -13 \
        <(echo $_disp_list_pre | tr ' ' '\n') \
        <(echo $_disp_list_post | tr ' ' '\n'))

    echo "$_disp_vm"
}



function qube_get_ip () {
    declare _vm=$1
    declare _ip

    _ip=$(qvm-ls -n --fields=IP,NAME \
        | grep -m 1 "$_vm" \
        | cut -d' ' -f 1)

    notify 2 "qube_get_ip: $_vm $_ip"
    echo $_ip
}


function qube_wait_shutdown () {
    declare _vm=$1

    qvm-shutdown $_vm
    while [[ "$(qube_get_state $_vm)" != "Halted" ]]; do 
        sleep 3 
    done
    notify 2 "qube_wait_shutdown: $_vm halted"
}


function qube_run_commands () {
    declare _vm=$1
    declare _user=$2
    declare _commands="${@:3}"
    declare _cmd

    notify 2 "qube_run_commands: VM:$_vm user:$_user"

    while read -r _cmd <&3; do
        notify 2 "qube_run_commands: --$_cmd--"
        qvm-run $__qvm_run_options -u "$_user" "$_vm" "$_cmd"
    done 3<<< "$_commands"
}



function qube_remove_incomming () {
    declare _vm=$1

    qvm-run \
        $__qvm_run_options \
        "$_vm" \
        "rm -rf /home/user/QubesIncoming/"
}



function qube_copy_file () {
    declare _vm=$1
    declare _user=$2
    declare _localfile=$3
    declare _filename=$(basename "$_localfile")
    declare _remotefile=$4

    qvm-copy-to-vm $_vm $_localfile
    qvm-run \
        $__qvm_run_options \
        -u "$_user" \
        "$_vm" \
        "cp /home/user/QubesIncoming/dom0/$_filename $_remotefile"
}



function qube_write_file () {
    declare _vm=$1
    declare _user=$2
    declare _file=$3
    declare _lines="${@:4}"
    declare _line

    notify 2 "qube_write_file: VM:$_vm user:$_user file:$_file"

    #qvm-run $__qvm_run_options -u "$_user" "$_vm" "echo \"\" > $_file"
    qvm-run $__qvm_run_options -u "$_user" "$_vm" "rm -f $_file"
    qvm-run $__qvm_run_options -u "$_user" "$_vm" "touch $_file"
    qube_append_file $_vm $_user $_file "$_lines"
}


function qube_append_file () {
    declare _vm=$1
    declare _user=$2
    declare _file=$3
    declare _lines="${@:4}"
    declare _line
    declare _linefix

    notify 2 "qube_append_file: VM:$_vm user:$_user file:$_file"

    _lines=$(echo "$_lines" | sed -e '/./,$!d')  # remove any initial newlines

    while read -r _line <&3; do
        _linefix=${_line//\"/\\\"}    # escape "
        _linefix=${_linefix//$/\\$}   # escape $
        _linefix=${_linefix//\`/\\\`} # escape `
        qvm-run $__qvm_run_options -u "$_user" "$_vm" "echo \"$_linefix\" >> $_file"
    done 3<<< "$_lines"
}


function qube_update () {
    declare _vm=$1
    declare _ostype
    declare _cmd

    _ostype=$( qube_get_distribution $_vm )
    notify 2 "qube_update: vm:$_vm ($_ostype)"


    ##### temporary #####
    if [ -n "$SKIPIT" ]; then
        return 0
    fi


    case $_ostype in
        "debian")
            _commands=$(cat <<EOF
                apt-get -y update
                apt-get -y upgrade
                apt-get -y dist-upgrade
                apt-get -y clean
                apt-get -y remove
                apt-get -y autoremove
EOF
            )
            ;;
        "fedora")
            _commands=$(cat <<EOF
                dnf upgrade -y
                dnf clean all
EOF
            )
            ;;
        *)
            notify 0 "ERROR: qube_update: unknown OStype:$_ostype"
            exit 1
    esac
    qube_run_commands $_vm "root" "$_commands"
}


function qube_install_software () {
    declare _vm=$1
    declare _software=$2
    declare _ostype

    if [[ -z $_software ]]; then
        return 0
    fi
    
    _ostype=$( qube_get_distribution $_vm )
    notify 2 "qube_install_software: vm:$_vm ostype:$_ostype software:$_software"

    # software list delineated by '&'
    declare _softwarelist=$(echo $_software | tr '&' ' ')

    case $_ostype in
        "debian")
            declare _install="apt-get -y install $_softwarelist"
            ;;
        "fedora")
            declare _install="dnf install -y $_softwarelist"
            ;;
        *)
            notify 0 "ERROR: qube_install_software: unknown OStype:$_ostype"
            exit 1
    esac

    qube_run_commands $_vm "root" "$_install"
}



function disk_busy () {
    # check if hard disk is under load
    #   return 1 or 0
    declare _diskthreshold=1000
    declare _sum_diff
    declare _diff_data=()
    declare _raw_disk_data
    declare _diskdata1
    declare _diskdata2

    _raw_disk_data=$(cat /proc/diskstats \
        | grep "sda " \
        | tr -s ' ' \
        | cut -d' ' -f 5-19 )
    _diskdata1=($_raw_disk_data)

    sleep 1

    _raw_disk_data=$(cat /proc/diskstats \
        | grep "sda " \
        | tr -s ' ' \
        | cut -d' ' -f 5-19 )
    _diskdata2=($_raw_disk_data)

    for i in ${!_diskdata2[@]}; do
        _diff_data+=( $(( ${_diskdata2[$i]} - ${_diskdata1[$i]} )) )
    done

    _sum_diff=$(IFS=+; echo "$((${_diff_data[*]}))")

    if [[ $_sum_diff -gt $_diskthreshold ]]; then
        echo 1  # disk busy
    else
        echo 0  # disk not busy
    fi
}


function wait_disk_ready () {
    # return when hard disk is no longer under load
    declare _seconds=1
    declare _DISKCHECKS=0

    while true; do 
        _DISKCHECKS=0

        for i in {1..2}; do 
            # _seconds=$(awk 'BEGIN{srand(); print rand() *2 }')
            sleep $_seconds
            _DISKCHECKS=$(( $_DISKCHECKS + $(disk_busy) ))
        done 

        if [[ $_DISKCHECKS -eq 0 ]]; then
            break
        fi
    done
}

 


function get_attached_deviceid () {
    declare _vm=$1
    declare _deviceid
    _deviceid=$(qvm-run $__qvm_run_options $_vm "lsblk | tac | grep -m 1 . | cut -d' ' -f 1")

    notify 2 "get_deviceid: $_deviceid"
    echo "$_deviceid"
}



function attach_device () {
    declare _vm=$1
    declare _device=$2
    declare _mountpoint=$3
    declare _deviceid

    notify 2 "attach_device: qvm-device block attach $_vm $_device (on $_mountpoint)"
    # perform run action to wake up qube
    qube_run_commands $_vm "root" "mkdir -p $_mountpoint"

    qvm-device block attach $_vm $_device
    _deviceid=$(get_attached_deviceid $_vm)
    _commands=$(cat <<EOF
        chmod a+rwx $_mountpoint
        mount -o sync /dev/$_deviceid $_mountpoint
EOF
)
    qube_run_commands $_disp "root" "$_commands"

    declare _mounted=$(qvm-run $__qvm_run_options $_vm "grep $_mountpoint /proc/mounts")
    if [[ -z $_mounted ]]; then
        notify 1 "ERROR: attach_device /dev/$_deviceid not mounted"
        exit 1
    else
        notify 2 "attach_device: /dev/$_deviceid"
        echo "/dev/$_deviceid"
    fi
}



function detach_device () {
    declare _vm=$1
    declare _device=$2
    declare _mountpoint=$3
    declare _xx

    qvm-run $__qvm_run_options $_vm "sync"
    qube_run_commands $_vm "user" "sync"
    sleep 2
    qube_run_commands $_vm "user" "sync"

    qube_run_commands $_vm "root" "umount $_mountpoint"
    sleep 2
    qvm-device block detach $_vm $_device
    notify 2 "detach_device: $_vm $_device"
}



